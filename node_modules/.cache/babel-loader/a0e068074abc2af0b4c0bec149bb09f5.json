{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Projects\\\\tweeter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:\\\\Projects\\\\tweeter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Projects\\\\tweeter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Projects\\\\tweeter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Projects\\\\tweeter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Projects\\\\tweeter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Projects\\\\tweeter\\\\src\\\\app.js\";\nimport React from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Content from \"./components/content\";\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      messages: [\"Hello, World!!!\", \"Just do it\"]\n    };\n\n    _this.splitMessage = function (text) {\n      var LIMIT_OF_MESSAGE = 50;\n      var str = text;\n      var messages = [];\n      var strArr = str.split(\" \");\n      if (str.length === 0 || strArr.filter(function (m) {\n        return m.length > LIMIT_OF_MESSAGE;\n      }).length > 0) return [\"Invalid Message\"];\n      if (str.length <= LIMIT_OF_MESSAGE) return [str];\n      var numOfMessages = Math.ceil(str.length / LIMIT_OF_MESSAGE); // predict how many messages limited by 50 chars\n\n      var maxIndicatorsStr = (numOfMessages + \"/\" + numOfMessages + \" \").length * numOfMessages; // '1000/1000 ' * number of repeating\n\n      var maxStrWithIndicators = maxIndicatorsStr + str.length - (numOfMessages - 1); // total string included indicators string\n\n      numOfMessages = Math.ceil(maxStrWithIndicators / LIMIT_OF_MESSAGE); //re-calculate number of message after got total string\n\n      for (var i = 0; i < numOfMessages; i++) {\n        var tmpStr = i + 1 + \"/\" + numOfMessages;\n\n        for (var j = 0; j < strArr.length; j++) {\n          if (tmpStr.length + strArr[j].length + 1 <= LIMIT_OF_MESSAGE) {\n            tmpStr += \" \" + strArr[j];\n            strArr.shift();\n            j--;\n          } else {\n            break;\n          }\n        }\n\n        messages.push(tmpStr);\n      }\n\n      return messages;\n    };\n\n    _this.handleClick = function (text) {\n      var newMessages = _this.splitMessage(text);\n\n      if (newMessages[0] === \"Invalid Message\") {\n        alert(\"Invalid Message\");\n        return;\n      }\n\n      _this.setState({\n        messages: [].concat(_toConsumableArray(newMessages), _toConsumableArray(_this.state.messages))\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(Content, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["D:\\Projects\\tweeter\\src\\app.js"],"names":["React","NavBar","Content","App","state","messages","splitMessage","text","LIMIT_OF_MESSAGE","str","strArr","split","length","filter","m","numOfMessages","Math","ceil","maxIndicatorsStr","maxStrWithIndicators","i","tmpStr","j","shift","push","handleClick","newMessages","alert","setState","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport NavBar from \"./components/navbar\";\r\nimport Content from \"./components/content\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    messages: [\"Hello, World!!!\", \"Just do it\"]\r\n  };\r\n\r\n  splitMessage = text => {\r\n    const LIMIT_OF_MESSAGE = 50;\r\n    const str = text;\r\n    let messages = [];\r\n    let strArr = str.split(\" \");\r\n\r\n    if (\r\n      str.length === 0 ||\r\n      strArr.filter(m => m.length > LIMIT_OF_MESSAGE).length > 0\r\n    )\r\n      return [\"Invalid Message\"];\r\n\r\n    if (str.length <= LIMIT_OF_MESSAGE) return [str];\r\n\r\n    let numOfMessages = Math.ceil(str.length / LIMIT_OF_MESSAGE); // predict how many messages limited by 50 chars\r\n    let maxIndicatorsStr =\r\n      (numOfMessages + \"/\" + numOfMessages + \" \").length * numOfMessages; // '1000/1000 ' * number of repeating\r\n    let maxStrWithIndicators =\r\n      maxIndicatorsStr + str.length - (numOfMessages - 1); // total string included indicators string\r\n\r\n    numOfMessages = Math.ceil(maxStrWithIndicators / LIMIT_OF_MESSAGE); //re-calculate number of message after got total string\r\n\r\n    for (let i = 0; i < numOfMessages; i++) {\r\n      let tmpStr = i + 1 + \"/\" + numOfMessages;\r\n      for (let j = 0; j < strArr.length; j++) {\r\n        if (tmpStr.length + strArr[j].length + 1 <= LIMIT_OF_MESSAGE) {\r\n          tmpStr += \" \" + strArr[j];\r\n          strArr.shift();\r\n          j--;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      messages.push(tmpStr);\r\n    }\r\n\r\n    return messages;\r\n  };\r\n\r\n  handleClick = text => {\r\n    const newMessages = this.splitMessage(text);\r\n\r\n    if (newMessages[0] === \"Invalid Message\") {\r\n      alert(\"Invalid Message\");\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      messages: [...newMessages, ...this.state.messages]\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar onClick={this.handleClick} />\r\n        <Content messages={this.state.messages} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}